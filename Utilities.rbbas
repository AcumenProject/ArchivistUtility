#tag ModuleProtected Module Utilities	#tag Method, Flags = &h0		Sub Assert(condition as boolean, msg as String = "Assertion Failed", is_fatal as boolean = true)		  if not condition then		    ReportError msg		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function AutoEncoding(f as FolderItem, default_encoding as string = "UTF-8") As TextEncoding		  dim encoding as string		  		  encoding = sniffEncoding(f)		  		  if encoding = "" then		    return EncodingByName( default_encoding )		  else		    return EncodingByName( encoding )		  end if		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function EncodingByName(enc as string) As TextEncoding		  dim i as integer		  		  for i = 0 to encodings.count - 1		    if encodings.item(i).internetName = enc then		      return encodings.item(i)		    end if		  next		  		  ReportError "Could not set encoding to " + enc, true		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetFont(fontlist as string) As string		  dim desired_fonts() as string		  dim i as integer		  dim which_font as integer		  		  desired_fonts = split( fontlist, ";" )		  		  #if TargetHasGUI		    for which_font = 0 to desired_fonts.Ubound		      for i = 0 to fontcount - 1		        if font(i) = desired_fonts(which_font) then		          return font(i)		        end if		      next		    next		  #else		  #endif		  		  return "System"		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetShellFolderItem(path as String) As FolderItem		  dim f as folderItem		  dim parts() as string		  dim i as integer		  		  // log "Parsing path: " + path		  		  if path.Len > 0 and path.left(1) = "/" then		    return GetFolderItem( path, FolderItem.PathTypeShell )		  end if		  		  f = GetFolderItem("")		  		  if path = "" then		    return f		  end if		  		  parts = split(path, "/")		  		  select case parts(0)		  case ""		    ' should never happen!		    ReportError "Bizarre path problem!"		  case "."		    ' do nothing		  case "~"		    f = SpecialFolder.UserHome		  case else		    f = f.child( parts(0) )		  end select		  		  Assert f <> nil and f.exists, "Problem resolving path: " + path, true		  		  for i = 1 to parts.ubound		    		    select case parts(i)		    case ".."		      f = f.parent		    case else		      f = f.child(parts(i))		    end select		    		    Assert f <> nil and f.exists, "Problem resolving path: " + path, true		  next		  		  return f		Exception		  ReportError "Problem parsing path: " + path		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function implode(a() as string, sep as String = "") As string		  dim s as string		  dim i as integer		  		  if a.ubound < 0 then		    return ""		  end if		  		  s = a(0)		  		  for i = 1 to a.ubound		    s = s + sep + a(i)		  next		  		  return s		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function lines(extends s as string, delim as string = "") As string()		  dim t as string		  		  if delim = "" then		    t = s		    t = t.replaceAll(chr(13) + chr(10), chr(10))		    t = t.replaceAll(chr(13), chr(10))		    		    return t.split( chr(10) )		  else		    t = s.replaceAll( delim, chr(30) )		    return t.split( chr(30) )		  end if		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function LoadAllText(extends f as FolderItem, encoding_name as string = "UTF-8") As String		  dim input as TextInputStream		  dim s as string		  		  if not f.exists then		    return ""		  else		    input = f.OpenAsTextFile		    s = input.ReadAll( EncodingByName( encoding_name ) )		    input.close		    		    return s		  end if		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub log(s as String)		  #if TargetHasGUI		    faux_console_log = faux_console_log + s + chr(10)		  #else		    print s		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub RemoveEmptyCells(value_list() as String)		  dim i as integer		  		  for i = value_list.ubound downTo 0		    if value_list(i) = "" then		      value_list.remove i		    end if		  next		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Report(msg as string)		  #if TargetHasGUI		    ReportLog = ReportLog + msg + chr(10)		  #else		    print msg		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub ReportError(msg as string, fatal as boolean = true, error_list() as string = nil)		  if fatal then		    Dim r as RuntimeException		    r = New RuntimeException		    r.ErrorNumber = -1		    r.Message = "Fatal error: " + msg		    Raise r		  else		    #if TargetHasGUI		      ReportLog = ReportLog + "Error: " + msg + chr(10)		      if error_list <> nil then		        error_list.append msg		      else		        Msgbox "Error: " + msg		      end if		    #else		      if error_list <> nil then		        error_list.append msg		      else		        Print msg		      end if		    #endif		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SaveAllText(extends f as folderItem, s as String)		  dim output as TextOutputStream		  		  output = f.CreateTextFile		  output.write s		  output.close		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function SetLinefeeds(s as string, type as integer = UnixLinefeeds) As string		  select case type		  case UnixLinefeeds		    s = replaceAll( s, chr(13) + chr(10), chr(13) )		    s = replaceAll( s, chr(13), chr(10) )		  case MacClassicLinefeeds		    s = replaceAll( s, chr(13) + chr(10), chr(13) )		    s = replaceAll( s, chr(10), chr(13) )		  case DOSLineFeeds		    s = replaceAll( s, chr(13) + chr(10), chr(13) )		    s = replaceAll( s, chr(10), chr(13) )		    s = replaceAll( s, chr(13), chr(13) + chr(10) )		  end select		  		  return s		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function sniffEncoding(f as FolderItem) As String		  dim b as binaryStream		  dim i as uint32		  dim j as uint16		  dim k as uint8		  		  'Bytes    Encoding Form		  '00 00 FE FF    UTF-32, big-endian		  'FF FE 00 00    UTF-32, little-endian		  'FE FF    UTF-16, big-endian		  'FF FE    UTF-16, little-endian		  'EF BB BF    UTF-8		  		  if f = nil then		    ReportError "sniffEncoding passed nil file reference"		    return ""		  end if		  		  if f.directory then		    ReportError "sniffEncoding passed folder reference"		    return ""		  end if		  		  if not f.exists then		    ReportError "sniffEncoding passed bad file reference: " + f.shellPath		    return ""		  end if		  		  b = f.OpenAsBinaryFile		  b.LittleEndian = false		  i = b.readInt32		  b.Position = 0		  j = b.readInt16		  k = b.readInt8		  b.close		  		  if i = &h0000feff then		    return "UTF-32BE"		  elseif i = &hfffe0000 then		    return "UTF-32LE"		  elseif j = &hfeff then		    return "UTF-16BE"		  elseif j = &hfffe then		    return "UTF-16LE"		  elseif j = &hefbb and k = &hbf then		    return "UTF-8"		  end if		  		  select case nthField( f.name, ".", countFields( f.name, "." ) )		  case "utf8"		    return "UTF-8"		  end select		  		  return ""		  		Exception		  ReportError "Could not sniff encoding of file"		  return ""		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function tabs(n as integer) As String		  dim output as string		  		  while n > 0		    output = output + chr(9)		    n = n - 1		  wend		  		  return output		End Function	#tag EndMethod	#tag Property, Flags = &h0		faux_console_log As string	#tag EndProperty	#tag Property, Flags = &h0		ReportLog As string	#tag EndProperty	#tag Constant, Name = DOSLineFeeds, Type = Double, Dynamic = False, Default = \"2", Scope = Public	#tag EndConstant	#tag Constant, Name = MacClassicLinefeeds, Type = Double, Dynamic = False, Default = \"1", Scope = Public	#tag EndConstant	#tag Constant, Name = UnixLinefeeds, Type = Double, Dynamic = False, Default = \"0", Scope = Public	#tag EndConstant	#tag ViewBehavior		#tag ViewProperty			Name="faux_console_log"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="ReportLog"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Module#tag EndModule